@model OnTaskV2.Models.ViewModels.TA_Table

<!-- html element for line chart with scheduled Vs recommended hours-->
<!-- e.g. id = "dayChartSunday", "dayChartMonday", etc-->
<canvas id="dayHoursChart@(Model.InputDate.DayOfWeek)" style="width:600px; height:250px;"></canvas>

<!--Initialize line chart with Scheduled Vs Recommended hours-->
<script type="text/javascript">
    $(document).ready(function () {
        var labelDayArray@(Model.InputDate.DayOfWeek) = []; //creates a javascript array for x-axis labels to be used by chart
        @foreach (var t in Model.TimePeriod) //gets the time periods from Model and pushes into javascript array
        {
            @:labelDayArray@(Model.InputDate.DayOfWeek).push("@t");
        }
        var schedDayArray@(Model.InputDate.DayOfWeek) = []; //creates a javascript array for scheduled hours to be used by chart
        @foreach (var a in Model.ActualHours) //gets the actual hours from Model and pushes into javascript array
        {
            @:schedDayArray@(Model.InputDate.DayOfWeek).push("@(a.ToString("0.##"))");
        }
        var recmndDayArray@(Model.InputDate.DayOfWeek) = []; //creates a javascript array for recommended hours to be used by chart
        @foreach (var r in Model.RecommendHours) //gets the recommended hours from Model and pushes into javascript array
        {
            @:recmndDayArray@(Model.InputDate.DayOfWeek).push("@(r.ToString("0.##"))");
        }

        //
        //Trim zero values from end of arrays
        var trimUnits = 0;
        var position = @(Model.TimePeriod.Count()) - 1;
        while (position >= 0  && schedDayArray@(Model.InputDate.DayOfWeek)[position] == 0 && recmndDayArray@(Model.InputDate.DayOfWeek)[position] == 0 )
        {
            trimUnits++;
            position--;
        }
        labelDayArray@(Model.InputDate.DayOfWeek).splice(position+1,trimUnits);
        schedDayArray@(Model.InputDate.DayOfWeek).splice(position+1,trimUnits);
        recmndDayArray@(Model.InputDate.DayOfWeek).splice(position+1,trimUnits);

        //
        //Trim zero values from beginning of arrays
        trimUnits = 0;
        position = 0;
        while (position< @(Model.TimePeriod.Count()) && schedDayArray@(Model.InputDate.DayOfWeek)[position] == 0 && recmndDayArray@(Model.InputDate.DayOfWeek)[position] == 0)
        {
            trimUnits++;
            position++;
        }
        labelDayArray@(Model.InputDate.DayOfWeek).splice(0,trimUnits);
        schedDayArray@(Model.InputDate.DayOfWeek).splice(0,trimUnits);
        recmndDayArray@(Model.InputDate.DayOfWeek).splice(0,trimUnits);

        //initiales new chart with id: daySchedChart[DayOfWeek] (e.g. daySchedChartSunday, daySchedChartMonday, etc)
        //creates new variable mySchedChart[DayOfWeek] (e.g. mySchedChartSunday, mySchedChartMonday, etc)
        var myHoursChart@(Model.InputDate.DayOfWeek) = new Chart($("#dayHoursChart@(Model.InputDate.DayOfWeek)"), {
            type: 'line', //bar chart needed for mixed line/bar charts
            data: {
                labels: labelDayArray@(Model.InputDate.DayOfWeek), //sets labels to javascript array variable created above
                datasets: [
                    {
                        type: 'line', //changes this data series to line
                        label: "Scheduled", //label for series, including tooltip when hovering
                        // The actual data for the Traffic data series
                        //sets traffic data to Model.TraffiTY[]
                        //string.Join used to format data as javascript array
                        data: schedDayArray@(Model.InputDate.DayOfWeek),
                        fill: true,
                        backgroundColor: "rgba(97, 97, 97, 0.1)",
                        borderColor: "rgba(97, 97, 97, 1)",
                        borderCapStyle: 'butt',
                        borderDash: [],
                        borderDashOffset: 0.0,
                        borderJoinStyle: 'miter',
                        lineTension: 0.3,
                        pointBackgroundColor: "#eee",
                        pointBorderColor: "rgba(97, 97, 97, 1)",
                        pointBorderWidth: 1,
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: "rgba(97, 97, 97, 0.4)",
                        pointHoverBorderColor: "rgba(97, 97, 97, 1)",
                        pointHoverBorderWidth: 2,
                        pointRadius: 4,
                        pointHitRadius: 10
                    },
                    {
                        type: 'line', //changes this data series to line
                        label: "Recommended", //label for series, including tooltip when hovering
                        // The actual data for the Traffic data series
                        //sets traffic data to Model.TraffiTY[]
                        //string.Join used to format data as javascript array
                        data: recmndDayArray@(Model.InputDate.DayOfWeek),
                        fill: true,
                        backgroundColor: "rgba(192, 60, 60, 0.2)",
                        borderColor: "rgba(192, 60, 60, 1)",
                        borderCapStyle: 'butt',
                        borderDash: [],
                        borderDashOffset: 0.0,
                        borderJoinStyle: 'miter',
                        lineTension: 0.3,
                        pointBackgroundColor: "#fff",
                        pointBorderColor: "rgba(192, 60, 60, 1)",
                        pointBorderWidth: 1,
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: "rgba(192, 60, 60, 0.4)",
                        pointHoverBorderColor: "rgba(192, 60, 60, 1)",
                        pointHoverBorderWidth: 2,
                        pointRadius: 4,
                        pointHitRadius: 10
                    }
                ]
            },
            options: {
                title: { //overall chart title
                    display: true,
                    text: "Scheduled & Recommended Hours"
                },
                tooltips: {
                    mode: 'label', //uses dataSeries labels
                },
                responsive: true,
                scales: {
                    xAxes: [{
                        stacked: false,
                    }],
                    yAxes: [{
                        position: 'left', //y-axis for line series
                        display: true,
                        labelString: "Labor Hours",
                        stacked: false,
                        ticks: {
                            beginAtZero: true,
                        }
                    }]
                }
            }
        });
    });
</script>
