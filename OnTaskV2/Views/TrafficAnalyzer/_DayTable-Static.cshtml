@model OnTaskV2.Models.ViewModels.TA_Table

@{ 
    ViewBag.Title = "Labor Optimization Table";
}

<table class="table table-hover trafficAnalyzerDayTable" id="dayTable@(Model.InputDate.DayOfWeek)">
    <thead>
        <tr>
            <th>Time</th>
            <th>Traffic</th>
            <th title="Percent of Daily Traffic">% Traffic</th>
            <th title="Transactions">Trans</th>
            <th title="Conversion Ratio">Conv Ratio</th>
            <th title="Actual Labor Hours">Actl Hrs</th>
            <th title="Shopper To Associate Ratio">STAR</th>
            <th title="Recommended Labor Hours">Recmd Hrs</th>
            <th title="Increase/Reduce Hours">+/- Hours</th>
        </tr>
    </thead>
    <tfoot>
        <tr>
            <th>Total</th>
            <th>@Model.TrafficTY.Sum().ToString("#,##0")</th>
            <th>@Model.TrafficPercent.Sum().ToString("0.##%")</th>
            <th>@Model.Transactions.Sum().ToString("0.##")</th>
            <th>
                @if (Model.TrafficTY.Sum() != 0)
                {
                    <span>@((Model.Transactions.Sum() / Model.TrafficTY.Sum()).ToString("0.##%"))</span>
                }
            </th>
            <th>@Model.ActualHours.Sum().ToString("0.##")</th>
            <th>
                @if (Model.ActualHours.Sum() != 0)
                {
                    <span>@((Model.TrafficTY.Sum() / Model.ActualHours.Sum()).ToString("0.##"))</span>
                }
            </th>
            <th>@Model.RecommendHours.Sum().ToString("0.##")</th>
            <th>@Model.PlusMinusHours.Sum().ToString("0.##")</th>
        </tr>
    </tfoot>
    <tbody>
        @for (int i = 0; i < Model.ActualHours.Count(); i++)
        {
            if (Model.TrafficTY[i] != 0)
            {
                <tr class="@(Model.IsPeakPeriod[i] ? "warning": "")">
                    <td>@Model.StartTime.Add(new TimeSpan(Model.TimeIncrement.Ticks * i)).ToShortTimeString()</td>
                    <td>@Model.TrafficTY[i].ToString("0.##")</td>
                    <td>@Model.TrafficPercent[i].ToString("0.##%")</td>
                    <td>@Model.Transactions[i].ToString("0.##")</td>
                    <td>@Model.ConversionPercent[i].ToString("0.##%")</td>
                    <td>@Model.ActualHours[i].ToString("0.##")</td>
                    <td>@Model.TPLH[i].ToString("0.##")</td>
                    <td>@Model.RecommendHours[i].ToString("0.##")</td>
                    <td>@Model.PlusMinusHours[i].ToString("0.##")</td>
                </tr>
            }
        }
    </tbody>
</table>

<dl class="dl-horizontal">
    <dt>@Html.DisplayNameFor(model => model.BudgetHours)</dt>
    <dd>@Html.DisplayFor(model => model.BudgetHours)</dd>

    <dt>@Html.DisplayNameFor(model => model.BaseHours)</dt>
    <dd>@Html.DisplayFor(model => model.BaseHours)</dd>

    <dt>@Html.DisplayNameFor(model => model.NonSellHours)</dt>
    <dd>@Html.DisplayFor(model => model.NonSellHours)</dd>

    <dt>@Html.DisplayNameFor(model => model.SellingHours)</dt>
    <dd>@Html.DisplayFor(model => model.SellingHours)</dd>

    <dt>@Html.DisplayNameFor(model => model.TargetSTAR)</dt>
    <dd>@Html.DisplayFor(model => model.TargetSTAR)</dd>
</dl>

<br>

<canvas id="dayChart@(Model.InputDate.DayOfWeek)" width="800" height="400"></canvas>

<script type="text/javascript" language=javascript>
    $(document).ready(function () {

         $.fn.dataTable.moment('h:mm A');

         $('#dayTable@(Model.InputDate.DayOfWeek)').dataTable({
             "paging": false,
             "searching": false,
             "info": false,
             "columns": [
                { className: "dt-right" },
                { className: "dt-right" },
                { className: "dt-right" },
                { className: "dt-right" },
                { className: "dt-right" },
                { className: "dt-right" },
                { className: "dt-right" },
                { className: "dt-right" },
                { className: "dt-right" }, ]
         });
     });
</script>


<script type="text/javascript">
    $(document).ready(function () {
        var labelArray@(Model.InputDate.DayOfWeek) = [];
        @foreach (var t in Model.TimePeriod)
        {
            @:labelArray@(Model.InputDate.DayOfWeek).push("@t");
        }
        var convArray@(Model.InputDate.DayOfWeek) = [];
        @foreach (var c in Model.ConversionPercent)
        {
            @:convArray@(Model.InputDate.DayOfWeek).push("@((c*100).ToString("0.##"))");
        }
        console.log(convArray@(Model.InputDate.DayOfWeek));
        var starArray@(Model.InputDate.DayOfWeek) = [];
        @foreach (var s in Model.TPLH)
        {
            @:starArray@(Model.InputDate.DayOfWeek).push("@(s.ToString("0.##"))");
        }
        var myChart@(Model.InputDate.DayOfWeek) = new Chart($("#dayChart@(Model.InputDate.DayOfWeek)"), {
            type: 'bar',
            data: {
                labels: labelArray@(Model.InputDate.DayOfWeek),
                datasets: [
                    {
                        type: 'line',
                        label: "Traffic TY",
                        // The actual data
                        data: [ @(string.Join(", ", Model.TrafficTY))],
                        fill: false,
                        backgroundColor: "rgba(255, 99, 132, 0.2)",
                        borderColor: "rgba(255, 99, 132, 1)",
                        borderCapStyle: 'butt',
                        borderDash: [],
                        borderDashOffset: 0.0,
                        borderJoinStyle: 'miter',
                        lineTension: 0.3,
                        pointBackgroundColor: "#fff",
                        pointBorderColor: "rgba(255, 99, 132, 1)",
                        pointBorderWidth: 1,
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: "rgba(255, 99, 132, 0.4)",
                        pointHoverBorderColor: "rgba(255, 99, 132, 1)",
                        pointHoverBorderWidth: 2,
                        pointRadius: 4,
                        pointHitRadius: 10
                    },
                    {
                        type: 'bar',
                        label: "STAR",
                        // The actual data
                        //data: [ @(string.Join(", ", Model.TPLH))],
                        data: starArray@(Model.InputDate.DayOfWeek),
                        // The properties below allow an array to be specified to change the value of the item at the given index
                        // String  or array - the bar color
                        backgroundColor: "rgba(54, 162, 235, 0.2)",
                        // String or array - bar stroke color
                        borderColor: "rgba(54, 162, 235, 1)",
                        // Number or array - bar border width
                        borderWidth: 1,
                        // String or array - fill color when hovered
                        hoverBackgroundColor: "rgba(54, 162, 235, 0.4)",
                        // String or array - border color when hovered
                        hoverBorderColor: "rgba(54, 162, 235, 1)",
                        yAxisID: "bar-y-axis",
                    },
                    {
                        type: 'bar',
                        label: "Conversion %",
                        // The actual data
                        //data: [ @(string.Join(", ", Model.ConversionPercent))],
                        data: convArray@(Model.InputDate.DayOfWeek),
                        // The properties below allow an array to be specified to change the value of the item at the given index
                        // String  or array - the bar color
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        // String or array - bar stroke color
                        borderColor: "rgba(75, 192, 192, 1)",
                        // Number or array - bar border width
                        borderWidth: 1,
                        // String or array - fill color when hovered
                        hoverBackgroundColor: "rgba(75, 192, 192, 0.4)",
                        // String or array - border color when hovered
                        hoverBorderColor: "rgba(75, 192, 192, 1)",
                        yAxisID: "bar-y-axis",
                    },
                ]
            },
            options: {
                barValueSpacing: 10,
                title: {
                    display: true,
                    text: "Chart - Traffic, Conversion, STAR"
                },
                tooltips: {
                    mode: 'label'
                },
                responsive: true,
                scales: {
                    xAxes: [{
                        stacked: false,
                    }],
                    yAxes: [{
                        stacked: false,
                        ticks: {
                            beginAtZero: true,
                        }
                    }, {
                        id: "bar-y-axis",
                        stacked: false,
                        ticks: {
                            beginAtZero: true,
                        },
                        type: 'linear'
                    }]
                }
            }
        });
    });
</script>